#!/usr/bin/env node

import yargs from 'yargs'

import yaml_linter from '../lib/linters/plugin-yaml-linter.js'
import example_linter from '../lib/linters/example-linter.js'
import readme_linter from '../lib/linters/readme-version-number-linter.js'

const argv = yargs(process.argv.slice(2))
  .env('PLUGIN')
  .usage('$0', 'Lint a buildkite plugin')
  .option('id', {
    describe: 'Id of the plugin (e.g. my-org/my-plugin)',
    type: 'string',
    alias: 'name'
  })
  .option('path', {
    describe: 'Path to the plugin',
    type: 'string'
  })
  .option('readme', {
    describe: 'Readme filename',
    type: 'string',
    default: 'README.md'
  })
  .option('skip-invalid', {
    describe: 'Invalid versions do not cause failures',
    type: 'boolean',
    default: false
  })
  .check(yargs => {
    if (yargs && yargs.id && yargs.id.endsWith('-buildkite-plugin') && yargs.id.indexOf('://') === -1
        && !yargs.id.startsWith('./') && !yargs.id.startsWith('/') && !yargs.id.startsWith('~/') ) {
      throw new Error(`--id can not end with -buildkite-plugin. Did you mean ${yargs.id.replace(/-buildkite-plugin$/, '')}?`)
    }
    return true
  })
  .demandOption(['id', 'path'])
  .help()
  .version(false)
  .argv

import { t as tap } from 'tap'

Promise.all([
  yaml_linter(argv, tap),
  example_linter(argv, tap),
  readme_linter(argv, tap),
  ])
  .catch((err) => {
    tap.threw(err)
  })
  .then(() => {
    tap.end()
  })
